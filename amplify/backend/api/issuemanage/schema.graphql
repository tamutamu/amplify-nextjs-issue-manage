# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
#input AMPLIFY { globalAuthRule: AuthRule = { allow: public provider: iam operations: [read, create, update, delete] } } # FOR TESTING ONLY!
type Event {
  type: String!
  args: String!
}

enum EventStoreStatus {
  PENDING
  RUNNING
  COMPLETE
}

enum EventStoreResultStatus {
  SUCCESS
  FAILED
  ERROR
}

type EventStore
  @model
  @auth(
    rules: [
      { allow: public, provider: iam, operations: [read] }
      { allow: owner, operations: [create, update, delete, read] }
    ]
  ) {
  id: ID! @primaryKey
  seq: Int!
  event: Event
  status: EventStoreStatus
  resultStatus: EventStoreStatus
  owner: String
}

enum EnumTicketStatus {
  PENDING
  RUNNING
  COMPLETE
}

type Group
  @model
  @auth(
    rules: [
      { allow: public, provider: iam, operations: [read] }
      { allow: owner, operations: [create, update, delete, read] }
    ]
  ) {
  id: ID! @primaryKey(sortKeyFields: ["userId"])
  userId: String!
  name: String!
  owner: String
}

type User
  @model
  @auth(
    rules: [
      { allow: public, provider: iam, operations: [read] }
      { allow: owner, operations: [create, update, delete, read] }
    ]
  ) {
  id: ID! @primaryKey(sortKeyFields: ["groupId"])
  groupId: String!
  name: String!
  owner: String
}

type Project
  @model
  @auth(
    rules: [
      { allow: public, provider: iam, operations: [read] }
      { allow: owner, operations: [create, update, delete, read] }
    ]
  ) {
  id: ID! @primaryKey
  name: String!
  groupIds: [String]
  owner: String
}

enum EnumCategory {
  ISSUE
  TASK
  TODO
}

type Ticket
  @model
  @auth(
    rules: [
      { allow: public, provider: iam, operations: [read] }
      { allow: owner, operations: [create, update, delete, read] }
    ]
  ) {
  id: ID! @primaryKey
  title: String!
  content: String!
  coverImage: String
  status: EnumTicketStatus!
  Project_id: String!
  category: EnumCategory!
  startDatetime: AWSDateTime
  endDatetime: AWSDateTime
  owner: String
}

type Comment
  @model
  @auth(
    rules: [
      { allow: public, provider: iam, operations: [read] }
      { allow: owner, operations: [create, update, delete, read] }
    ]
  ) {
  id: ID! @primaryKey
  content: String!
  Ticket_id: String!
  User_name: String!
  owner: String
}

type Counter
  @model
  @auth(
    rules: [
      { allow: public, provider: iam, operations: [read] }
      { allow: owner, operations: [create, update, delete, read] }
    ]
  ) {
  id: ID! @primaryKey
  count: Int!
  owner: String
}

type Mutation {
  incrementCount(id: String): Int
    @auth(rules: [{ allow: public, provider: iam }])
}
